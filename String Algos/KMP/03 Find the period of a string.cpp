/*
Problem:
Find period of string, i.e. that minimum length of substring by which given string can be generated by appending one or more such substring.

Example:
String: a  b  c  d  a  b  c  d  a  b  c  d  a  b  c  d
pi[]:   0  0  0  0  1  2  3  4  5  6  7  8  9  10 11 12 

If in pi array after continuos 0, numbers are in increasing order, then string i periodic.
Period = number of congguous starting zeros
*/



int pi[100005];

// generates PI array (or LPS [largest prefix suffix])
void prefix_function(string &s) {
    int n = (int)s.length();
    pi[0] = 0;
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j]) {
            j = pi[j-1];
        }
        if (s[i] == s[j]) {
            j++;
        }
        pi[i] = j;
    }
}


void solve(){
    int x, y, k;
    string s;
    cin >> s;
    n = s.length();
    prefix_function(s);

    int period = 0;
    f(i, n) {
        if(pi[i] == 0) { 
            period++;
        } else {
            if(pi[i] != pi[i-1] + 1) {
                cout << "Aperiodic\n";
                return;
            }
        }
    }
    cout << period << endl;
    cout << s.substr(0, period);
}
